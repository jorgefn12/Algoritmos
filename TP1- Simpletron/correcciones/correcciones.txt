correcciones de codigo/ejecucion
linea 188 y 192  retornar fallo. /*Preguntar*/

linea 424 se puede pasar una copia de puntero /* Testear, no esta funcionando*/

linea 441 validar que fgets returne NULL.

447:incrementar solo si lee bien.

linea 479 y 472 si se terminan rellenando la memoria para que iguale cantidad_memoria-> usar malloc directamente sin realloc.

linea 430 y 492 utilizar un arreglo estatico, va a tener el mismo tamaño y se destruye al finalizar la funcion ?

de linea 497 a 510: me parece que es mejor usar do while. para meter todo dentro de un ciclo, y ademas
	se puede evitar el break poniendo una condicion mas legible en el ciclo.
	
En las funciones para imprimir dump
-> mandar un puntero o copia de puntero a estructura en lugar de copia de estructura.
Validar punteros
Validar con un temp que lo que retorna strtol este entre los rangos,
	para que no haya error al convertir a entero (eg. que lo tome como un negativo)
Tratar de reparar breaks y i = argc.
Validar reallocs
Revisar implementacion de strtok, imprimiendo por pantalla. linea 443.
El tratamiento con stdin y archivo bin es distinto (rellenar con 0 cuando no se alcanza memoria pedida)
Discutir si rellenar o no:
Agregar 0s no afecta la ejecucion.
Ventaja de no rellenar:
1)Un usuario quiere añadir un instructivo gigante, pero no sabe cuanta memoria pide -> agrega un numero muy grande en -m. Pero no le interesa el resto. Aquí no se deberia agregar ceros.
2)Si se ingresa por stdin, es muy probable que no sepa cuanta memoria utilizar especificamente -> se excede con -m.

Ventaja de rellenar.
1)Un usuario sabe que necesita varias lineas de codigo para variables, en lugar de agregar muchos ceros al codigo puede excederse con -m sabiendo que se van a rellenar.

Cambiar orden de TRUE,FALSE.

Preguntar si es necesario imprimir por binario los otros registros ademas de la memoria. Y si necesitamos seguir un formato.
Funcionamiento si envian -o stdout -of bin
